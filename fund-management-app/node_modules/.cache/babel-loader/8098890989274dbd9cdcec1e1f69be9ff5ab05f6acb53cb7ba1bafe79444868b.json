{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, vShow as _vShow, withCtx as _withCtx, createVNode as _createVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-25012f7b\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"table-operations\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Stock List\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  class: \"table-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_a_button = _resolveComponent(\"a-button\");\n  const _component_a_table = _resolveComponent(\"a-table\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_hoisted_2, _withDirectives(_createVNode(_component_a_button, {\n    onClick: $setup.clearAll\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"Clear sorters\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onClick\"]), [[_vShow, $setup.isSorted]])]), _createElementVNode(\"div\", _hoisted_3, [_createVNode(_component_a_table, {\n    columns: $setup.columns,\n    \"data-source\": $setup.stocks,\n    onChange: $setup.handleChange\n  }, null, 8 /* PROPS */, [\"columns\", \"data-source\", \"onChange\"])])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_a_button","onClick","$setup","clearAll","isSorted","_hoisted_3","_component_a_table","columns","stocks","onChange","handleChange"],"sources":["C:\\Users\\Edwaed\\Desktop\\fund-management-app\\src\\views\\StockPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <div class=\"table-operations\">\r\n        <h1>Stock List</h1>\r\n        <a-button v-show=\"isSorted\" @click=\"clearAll\">Clear sorters</a-button>\r\n      </div>\r\n      <div class=\"table-container\">\r\n        <a-table\r\n          :columns=\"columns\"\r\n          :data-source=\"stocks\"\r\n          @change=\"handleChange\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { apiService } from \"@/services/fundAPI\";\r\nimport { AButton, ATable } from \"ant-design-vue\";\r\nimport { computed, ref, h } from \"vue\";\r\nimport { stocksArr } from \"@/store/stockArr\";\r\nimport { FallOutlined, RiseOutlined } from \"@ant-design/icons-vue\";\r\nimport { useRouter } from \"vue-router\";\r\n\r\nexport default {\r\n  components: {\r\n    AButton,\r\n    ATable,\r\n  },\r\n  setup() {\r\n    const sortedInfo = ref();\r\n    const router = useRouter();\r\n\r\n    const columns = computed(() => {\r\n      const sorted = sortedInfo.value || {};\r\n      return [\r\n        {\r\n          title: \"Stock\",\r\n          key: \"companyNameSymbol\",\r\n          customRender: (cell) => {\r\n            const isSamllDevice = window.innerWidth <= 576;\r\n\r\n            const logoNode = h(\"img\", {\r\n              src: cell.record.LogoUrl,\r\n              alt: cell.record.CompanyName,\r\n              style: {\r\n                width: \"30px\",\r\n                height: \"30px\",\r\n                marginRight: \"10px\",\r\n              },\r\n            });\r\n            const symbolNode = h(\"div\", null, cell.record.Symbol);\r\n            const companyNameNode = h(\r\n              \"div\",\r\n              {\r\n                style: {\r\n                  fontWeight: \"bold\",\r\n                  overflow: \"hidden\",\r\n                  whiteSpace: \"nowrap\",\r\n                  textOverflow: \"ellipsis\",\r\n                  width: \"150px\",\r\n                },\r\n              },\r\n              cell.record.CompanyName\r\n            );\r\n\r\n            console.log(cell.record.Symbol);\r\n            return isSamllDevice\r\n              ? h(\r\n                  \"div\",\r\n                  {\r\n                    onClick: () =>\r\n                      router.push({\r\n                        name: \"StockDetail\",\r\n                        params: cell.record.Symbol,\r\n                      }),\r\n                    style: {\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      maxWidth: \"200px\",\r\n                      marginRight: \"0\",\r\n                    },\r\n                  },\r\n                  [logoNode, symbolNode]\r\n                )\r\n              : h(\r\n                  \"div\",\r\n                  {\r\n                    onClick: router.push({\r\n                      name: \"StockDetail\",\r\n                      params: cell.record.Symbol,\r\n                    }),\r\n                    style: {\r\n                      display: \"flex\",\r\n                      alignItems: \"center\",\r\n                      maxWidth: \"200px\",\r\n                      marginRight: \"0\",\r\n                    },\r\n                  },\r\n                  [logoNode, h(\"div\", null, [companyNameNode, symbolNode])]\r\n                );\r\n          },\r\n          responsive: [\"xxxl\", \"xxl\", \"xl\", \"lg\", \"md\", \"sm\", \"xs\"],\r\n        },\r\n        {\r\n          title: \"Revenue\",\r\n          dataIndex: \"Revenue\",\r\n          key: \"Revenue\",\r\n          customRender: ({ text }) => {\r\n            return h(\"span\", { fontWeight: \"bold\" }, `$  ${text}`);\r\n          },\r\n          responsive: [\"xxxl\", \"xxl\", \"xl\", \"lg\", \"md\"],\r\n        },\r\n        {\r\n          title: \"Market Cap\",\r\n          dataIndex: \"MarketCap\",\r\n          key: \"MarketCap\",\r\n          customRender: ({ text }) => {\r\n            return h(\"span\", { fontWeight: \"bold\" }, `$  ${text}`);\r\n          },\r\n          responsive: [\"xxxl\", \"xxl\", \"xl\", \"lg\", \"md\"],\r\n        },\r\n        {\r\n          title: \"Price Change\",\r\n          dataIndex: \"PriceChange\",\r\n          key: \"PriceChange\",\r\n          sorter: (a, b) => {\r\n            const aValue = parseFloat(a.PriceChange.replace(\"%\", \"\"));\r\n            const bValue = parseFloat(b.PriceChange.replace(\"%\", \"\"));\r\n            return aValue - bValue;\r\n          },\r\n          sortOrder: sorted.columnKey === \"PriceChange\" && sorted.order,\r\n          customRender: ({ text, record }) => {\r\n            const color = record.PriceChange.includes(\"-\") ? \"red\" : \"green\";\r\n            return record.PriceChange.includes(\"-\")\r\n              ? [\r\n                  h(FallOutlined, { style: { color } }),\r\n                  h(\r\n                    \"span\",\r\n                    {\r\n                      style: { color, marginLeft: \"10px\", fontWeight: \"bold\" },\r\n                    },\r\n                    text\r\n                  ),\r\n                ]\r\n              : [\r\n                  h(RiseOutlined, { style: { color } }),\r\n                  h(\r\n                    \"span\",\r\n                    {\r\n                      style: { color, marginLeft: \"5px\", fontWeight: \"bold\" },\r\n                    },\r\n                    text\r\n                  ),\r\n                ];\r\n          },\r\n          responsive: [\"xxxl\", \"xxl\", \"xl\", \"lg\", \"md\", \"sm\", \"xs\"],\r\n        },\r\n        {\r\n          title: \"Price\",\r\n          dataIndex: \"Price\",\r\n          key: \"Price\",\r\n          sorter: (a, b) => a.Price - b.Price,\r\n          sortOrder: sorted.columnKey === \"Price\" && sorted.order,\r\n          customRender: ({ text }) => {\r\n            return h(\r\n              \"span\",\r\n              {\r\n                style: {\r\n                  fontWeight: \"bold\",\r\n                  fontFamily: \"Montserrat, sans-serif\",\r\n                },\r\n              },\r\n              `$ ${text}`\r\n            );\r\n          },\r\n          responsive: [\"xxxl\", \"xxl\", \"xl\", \"lg\", \"md\", \"sm\", \"xs\"],\r\n        },\r\n      ];\r\n    });\r\n\r\n    const isSorted = computed(() => {\r\n      return (\r\n        sortedInfo.value &&\r\n        (sortedInfo.value.columnKey || sortedInfo.value.order)\r\n      );\r\n    });\r\n\r\n    const handleChange = (pagination, filters, sorter) => {\r\n      sortedInfo.value = sorter;\r\n    };\r\n\r\n    const clearAll = () => {\r\n      sortedInfo.value = null;\r\n    };\r\n\r\n    return {\r\n      stocks: stocksArr,\r\n      columns,\r\n      handleChange,\r\n      clearAll,\r\n      isSorted,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.table-operations {\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.table-container {\r\n  max-height: calc(100vh - 300px); /* Adjust the value as needed */\r\n  overflow-y: auto;\r\n}\r\n</style>\r\n"],"mappings":";;;EAGWA,KAAK,EAAC;AAAkB;gEAC3BC,mBAAA,CAAmB,YAAf,YAAU;;EAGXD,KAAK,EAAC;AAAiB;;;;uBANhCE,mBAAA,CAcM,cAbJD,mBAAA,CAYM,cAXJA,mBAAA,CAGM,OAHNE,UAGM,GAFJC,UAAmB,E,gBACnBC,YAAA,CAAsEC,mBAAA;IAAzCC,OAAK,EAAEC,MAAA,CAAAC;EAAQ;sBAAE,MAAa,C,iBAAb,eAAa,E;;4CAAzCD,MAAA,CAAAE,QAAQ,E,KAE5BT,mBAAA,CAMM,OANNU,UAMM,GALJN,YAAA,CAIEO,kBAAA;IAHCC,OAAO,EAAEL,MAAA,CAAAK,OAAO;IAChB,aAAW,EAAEL,MAAA,CAAAM,MAAM;IACnBC,QAAM,EAAEP,MAAA,CAAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}