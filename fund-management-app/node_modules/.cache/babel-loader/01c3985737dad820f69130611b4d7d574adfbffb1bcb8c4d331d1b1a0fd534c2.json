{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { useRoute } from \"vue-router\";\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nimport { Line } from \"vue-chartjs\";\nimport \"chart.js/auto\";\nimport { stockExampleData } from \"@/store/stockDataExample\";\nexport default {\n  components: {\n    Line\n  },\n  setup(props, context) {\n    const route = useRoute();\n    const symbol = ref(route.params.symbol);\n    const dailyStockData = ref(null);\n    const chartData = ref(null);\n    const isLoading = ref(true);\n    fetchDailyStockData();\n    const fetchDailyStockData = async () => {\n      try {\n        const apiKey = \"4L899V8QWQXTQP85\";\n        const response = await axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${symbol.value}&apikey=${symbol.value === \"IBM\" ? \"demo\" : apiKey}`);\n        if (response.status === 200 && !!response.data[\"Time Series (Daily)\"]) {\n          dailyStockData.value = await response.data[\"Time Series (Daily)\"];\n        } else {\n          // due to api limit, if error happen use example data\n          dailyStockData.value = stockExampleData;\n        }\n      } catch (error) {\n        console.error(\"Error fetching daily stock data:\", error);\n      } finally {\n        formatData(dailyStockData.value);\n        isLoading.value = false;\n      }\n    };\n    const chartOptions = {\n      responsive: true,\n      plugins: {\n        legend: {\n          display: false\n        }\n      },\n      layout: {\n        padding: {\n          bottom: 20,\n          left: 0,\n          right: 0,\n          top: 0\n        }\n      }\n    };\n    const formatData = data => {\n      const chartLabels = [];\n      const chartValues = [];\n      for (const date in data) {\n        chartLabels.push(date);\n        chartValues.push(parseFloat(data[date][\"1. open\"]));\n      }\n      chartData.value = {\n        labels: chartLabels.reverse(),\n        datasets: [{\n          label: symbol.value + \"Stock Price\",\n          data: chartValues.reverse(),\n          borderColor: \"blue\",\n          fill: true\n        }]\n      };\n      context.emit(\"currentPrice\", chartValues[chartValues.length - 1]);\n    };\n    return {\n      chartData,\n      chartOptions,\n      isLoading,\n      symbol,\n      Line\n    };\n  }\n};","map":{"version":3,"names":["useRoute","ref","onMounted","axios","Line","stockExampleData","components","setup","props","context","route","symbol","params","dailyStockData","chartData","isLoading","fetchDailyStockData","apiKey","response","get","value","status","data","error","console","formatData","chartOptions","responsive","plugins","legend","display","layout","padding","bottom","left","right","top","chartLabels","chartValues","date","push","parseFloat","labels","reverse","datasets","label","borderColor","fill","emit","length"],"sources":["C:\\Users\\Edwaed\\Desktop\\stock_app\\fund-management-app\\src\\components\\StockChart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"isLoading\">\r\n      <a-spin size=\"large\" tip=\"loading\"></a-spin>\r\n    </div>\r\n    <div v-else>\r\n      <Line id=\"stockLine\" :options=\"chartOptions\" :data=\"chartData\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { useRoute } from \"vue-router\";\r\nimport { ref, onMounted } from \"vue\";\r\nimport axios from \"axios\";\r\nimport { Line } from \"vue-chartjs\";\r\nimport \"chart.js/auto\";\r\nimport { stockExampleData } from \"@/store/stockDataExample\";\r\nexport default {\r\n  components: { Line },\r\n\r\n  setup(props, context) {\r\n    const route = useRoute();\r\n    const symbol = ref(route.params.symbol);\r\n    const dailyStockData = ref(null);\r\n    const chartData = ref(null);\r\n    const isLoading = ref(true);\r\n\r\n    fetchDailyStockData();\r\n\r\n    const fetchDailyStockData = async () => {\r\n      try {\r\n        const apiKey = \"4L899V8QWQXTQP85\";\r\n        const response = await axios.get(\r\n          `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${\r\n            symbol.value\r\n          }&apikey=${symbol.value === \"IBM\" ? \"demo\" : apiKey}`\r\n        );\r\n        if (response.status === 200 && !!response.data[\"Time Series (Daily)\"]) {\r\n          dailyStockData.value = await response.data[\"Time Series (Daily)\"];\r\n        } else {\r\n          // due to api limit, if error happen use example data\r\n          dailyStockData.value = stockExampleData;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching daily stock data:\", error);\r\n      } finally {\r\n        formatData(dailyStockData.value);\r\n        isLoading.value = false;\r\n      }\r\n    };\r\n    const chartOptions = {\r\n      responsive: true,\r\n      plugins: {\r\n        legend: {\r\n          display: false,\r\n        },\r\n      },\r\n      layout: {\r\n        padding: {\r\n          bottom: 20,\r\n          left: 0,\r\n          right: 0,\r\n          top: 0,\r\n        },\r\n      },\r\n    };\r\n\r\n    const formatData = (data) => {\r\n      const chartLabels = [];\r\n      const chartValues = [];\r\n      for (const date in data) {\r\n        chartLabels.push(date);\r\n        chartValues.push(parseFloat(data[date][\"1. open\"]));\r\n      }\r\n      chartData.value = {\r\n        labels: chartLabels.reverse(),\r\n        datasets: [\r\n          {\r\n            label: symbol.value + \"Stock Price\",\r\n            data: chartValues.reverse(),\r\n            borderColor: \"blue\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      };\r\n      context.emit(\"currentPrice\", chartValues[chartValues.length - 1]);\r\n    };\r\n\r\n    return {\r\n      chartData,\r\n      chartOptions,\r\n      isLoading,\r\n      symbol,\r\n      Line,\r\n    };\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}